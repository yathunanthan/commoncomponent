import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Validators } from '@angular/forms';
import { CreditCardValidators } from 'angular-cc-library';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../../serivces/common-payment.service";
import * as i3 from "@angular/common";
import * as i4 from "ngx-card/card";
import * as i5 from "ngx-card/inputs";
export class PaymentCardDetailsComponent {
    constructor(fb, commomPaymentService) {
        var _a;
        this.fb = fb;
        this.commomPaymentService = commomPaymentService;
        this.payEmitter = new EventEmitter();
        this.storedCards = [];
        this.cardType = '';
        this.card = false;
        this.cardwidth = 350;
        this.messages = { validDate: 'valid\ndate', monthYear: 'mm/yy' }; //Strings for translation
        this.placeholders = { number: '•••• •••• •••• ••••', name: 'Full Name', expiry: '••/••', cvc: '•••' }; // Placeholders for rendered fields
        this.formatting = true;
        this.debug = true; // If true, will log helpful messages for setting up Card
        this.companyNameSelected = false;
        this.isCardNumberLength = true;
        this.cardLogo = '';
        this.cardImg = "";
        this.cardPaymentData = this.cardPaymentData;
        this.commomPaymentService.paymentDetails$.subscribe((response) => {
            this.cardPaymentData = response;
        });
        this.portalName = (_a = this.commomPaymentService.apiUrl) === null || _a === void 0 ? void 0 : _a.portal;
        if (this.portalName == 'StatementPortal' || this.portalName == 'InvoicePortal') {
            this.card = true;
        }
        else {
            this.card = false;
        }
        this.buildCreditFormS();
    }
    ngOnInit() {
        var _a, _b, _c;
        this.payEmitter.emit(true);
        let invoiceAddressesId = ((_a = this.cardPaymentData.invoiceDetails) === null || _a === void 0 ? void 0 : _a.invoiceAddressId) ? this.cardPaymentData.invoiceDetails.invoiceAddressId : this.cardPaymentData.invoiceAddressNo;
        this.portalName = (_b = this.commomPaymentService.apiUrl) === null || _b === void 0 ? void 0 : _b.portal;
        this.commomPaymentService.paymentStoredCard$.subscribe((stored) => {
            this.paymentStoredDetials = stored;
        });
        console.log('invaddress0', this.paymentStoredDetials);
        console.log('cardpaymentdetal', this.cardPaymentData);
        if (((_c = this.commomPaymentService.apiUrl) === null || _c === void 0 ? void 0 : _c.apiUrl) != '') {
            if (this.paymentStoredDetials == null || this.paymentStoredDetials == undefined) {
                this.commomPaymentService.getStorecard(invoiceAddressesId).subscribe((res) => {
                    if (res && res.records) {
                        this.storedCards = res.records;
                    }
                    else {
                        this.storedCards = res;
                    }
                    this.commomPaymentService.setPaymentStoredCard(this.storedCards);
                    console.log('cardDetails', this.storedCards);
                });
            }
            else {
                this.storedCards = this.paymentStoredDetials;
                console.log('cardDetailsafter', this.storedCards);
            }
        }
    }
    dropdown(val) {
        this.card = false;
        this.payEmitter.emit(false);
        if (val.value == 'Set up new debit or credit card') {
            this.card = true;
            if (this.portalName != 'AcceptProposal') {
                this.buildCreditForms();
            }
            else {
                this.buildCreditFormS();
            }
        }
        else {
            if (this.storedCards.storedCardDetails.length == 1) {
                this.cardSelected(this.storedCards.storedCardDetails[0].id, 'ts');
            }
            this.card = false;
        }
        // this.translate.get("Use existing credit card").subscribe(translations => {
        //   if(val.value== translations){
        //     this.card=true
        //     if(this.storedCards.length == 1){
        //       this.cardSelected(this.storedCards[0].id,'ts')
        //     }
        //   }
        //   else{
        //     this.card=false
        //     this.buildCreditForms()
        //   }
        // })
    }
    buildCreditForms() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        let date = new Date().toISOString().slice(0, 10);
        let invoiceNo;
        if ((_a = this.cardPaymentData.invoiceDetails) === null || _a === void 0 ? void 0 : _a.invoiceNumber) {
            invoiceNo = ((_b = this.cardPaymentData.invoiceDetails) === null || _b === void 0 ? void 0 : _b.invoiceNumber) ? "Invoice no : " + this.cardPaymentData.invoiceDetails.invoiceNumber : '';
        }
        else {
            invoiceNo = 'Opportunity no: ' + this.cardPaymentData.opportunityId;
        }
        let paymentId;
        if (((_c = this.cardPaymentData) === null || _c === void 0 ? void 0 : _c.cardCharges.length) != 0) {
            paymentId = this.cardPaymentData.cardCharges[this.commomPaymentService.cardCharges].paymentMethodId;
        }
        this.creditForm = this.fb.group({
            payment: this.fb.group({
                'cardCharge': [((_d = this.cardPaymentData) === null || _d === void 0 ? void 0 : _d.cardCharges[0].charge) ? this.cardPaymentData.cardCharges[0].charge : this.cardPaymentData.paymentCharge[0].charge],
                'cardName': [((_f = (_e = this.cardPaymentData) === null || _e === void 0 ? void 0 : _e.customerDetails) === null || _f === void 0 ? void 0 : _f.customerName) ? this.cardPaymentData.customerDetails.customerName : this.cardPaymentData.customerName, [Validators.required]],
                'cardNumber': ['', [Validators.required, CreditCardValidators.validateCCNumber]],
                'cardCvc': ['', [Validators.required, Validators.minLength(3), Validators.maxLength(4)]],
                'paymentDate': [date],
                'description': [invoiceNo],
                'isportal': [true],
                'reference': [invoiceNo],
                'email': [((_h = (_g = this.cardPaymentData) === null || _g === void 0 ? void 0 : _g.customerDetails) === null || _h === void 0 ? void 0 : _h.emailId) ? this.cardPaymentData.customerDetails.emailId : '', [Validators.required, Validators.email]],
                'expiry': ['', [Validators.required, CreditCardValidators.validateExpDate]],
                "paymentMethod": [paymentId ? paymentId : ''],
                "dontSendToAccounts": [''],
            })
        });
        this.placeholders = { name: ((_k = (_j = this.cardPaymentData) === null || _j === void 0 ? void 0 : _j.customerDetails) === null || _k === void 0 ? void 0 : _k.customerName) ? this.cardPaymentData.customerDetails.customerName : 'Full Name' };
    }
    buildCreditFormS() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        let date = new Date().toISOString().slice(0, 10);
        let invoiceNo;
        if ((_b = (_a = this.cardPaymentData) === null || _a === void 0 ? void 0 : _a.invoiceDetails) === null || _b === void 0 ? void 0 : _b.invoiceNumber) {
            invoiceNo = ((_d = (_c = this.cardPaymentData) === null || _c === void 0 ? void 0 : _c.invoiceDetails) === null || _d === void 0 ? void 0 : _d.invoiceNumber) ? "Invoice no : " + this.cardPaymentData.invoiceDetails.invoiceNumber : '';
        }
        else {
            invoiceNo = 'Opportunity no: ' + this.cardPaymentData.opportunityId;
        }
        this.creditForm = this.fb.group({
            'amount': [((_e = this.cardPaymentData) === null || _e === void 0 ? void 0 : _e.showDeposit) ? (_f = this.cardPaymentData) === null || _f === void 0 ? void 0 : _f.showDeposit : ''],
            'cardCharge': [0],
            'cardName': [((_h = (_g = this.cardPaymentData) === null || _g === void 0 ? void 0 : _g.customerDetails) === null || _h === void 0 ? void 0 : _h.customerName) ? this.cardPaymentData.customerDetails.customerName : (_j = this.cardPaymentData) === null || _j === void 0 ? void 0 : _j.customerName, [Validators.required]],
            'cardNumber': ['', [Validators.required, CreditCardValidators.validateCCNumber]],
            'cardCvc': ['', [Validators.required, Validators.minLength(3), Validators.maxLength(4)]],
            'cardAddressLine1': ['',],
            'cardAddressLine2': ['',],
            'cardAddressLine3': ['',],
            'cardTown': ['',],
            'cardType': ['',],
            'cardCounty': ['',],
            'cardPostCode': ['',],
            'paymentDate': [date],
            'description': [invoiceNo],
            'isportal': [true],
            'email': [((_l = (_k = this.cardPaymentData) === null || _k === void 0 ? void 0 : _k.customerDetails) === null || _l === void 0 ? void 0 : _l.emailId) ? this.cardPaymentData.customerDetails.emailId : '', [Validators.required, Validators.email]],
            'expiry': ['', [Validators.required, CreditCardValidators.validateExpDate]],
            'storedCard': [0,],
            'saveCard': [true,],
            "dontSendToAccounts": [''],
        });
        this.placeholders = { name: ((_o = (_m = this.cardPaymentData) === null || _m === void 0 ? void 0 : _m.customerDetails) === null || _o === void 0 ? void 0 : _o.customerName) ? this.cardPaymentData.customerDetails.customerName : 'Full Name' };
    }
    companyNameClick() {
        this.companyNameSelected = !this.companyNameSelected;
        this.creditForm.patchValue({ 'payment': { 'cardName': '' } });
    }
    keypress() {
        this.payEmitter.emit(this.creditForm);
    }
    setCardType() {
        this.cardLogo = this.detectCardType(this.creditForm.value.payment.cardNumber.replace(/\s/g, ""));
        var cardStatus = this.creditForm.get('payment.cardNumber');
        if (this.isCardNumberLength && (cardStatus === null || cardStatus === void 0 ? void 0 : cardStatus.status) == "INVALID")
            this.isCardNumberLength = false;
        if (!this.isCardNumberLength && (cardStatus === null || cardStatus === void 0 ? void 0 : cardStatus.status) == "VALID")
            this.isCardNumberLength = true;
        this.payEmitter.emit(this.creditForm);
        this.cardImg = "assets/paymentType/" + this.cardLogo + ".svg";
    }
    defaultCard() {
        this.cardImg = "assets/paymentType/card.svg";
    }
    errorHandler() {
        this.cardLogo = 'card';
    }
    cardSelected(val, from) {
        var _a;
        if (from == 'html') {
            val = val.value;
        }
        this.cardSelectedType = from;
        this.cardType = val.toString();
        var intArr = this.cardType.split(",");
        intArr.forEach((element) => {
            const tagsData = this.storedCards.storedCardDetails.find((x) => x['id'] == element);
            this.cardLogo = tagsData.card_type;
        });
        let date = new Date().toISOString().slice(0, 10);
        let invoiceNumber = ((_a = this.cardPaymentData.invoiceDetails) === null || _a === void 0 ? void 0 : _a.invoiceNumber) ? "Invoice no : #" + this.cardPaymentData.invoiceDetails.invoiceNumber : '';
        this.creditForm = this.fb.group({
            'paymentDate': [date, [Validators.required]],
            'description': [invoiceNumber],
            'reference': [invoiceNumber],
            'paymentMethod': [this.cardPaymentData.cardCharges[this.commomPaymentService.cardCharges].paymentMethodId, [Validators.required]],
            'storedCard': [val, [Validators.required]],
            'cardName': [this.cardPaymentData.customerDetails.customerName, [Validators.required]],
            'amount': [],
            'cardCharge': [this.cardPaymentData.cardCharges[this.commomPaymentService.cardCharges].charge,],
            'isPortal': [true],
        });
        setTimeout(() => {
            this.payEmitter.emit(this.creditForm);
        }, 100);
    }
    detectCardType(number) {
        var re = {
            electron: /^(4026|417500|4405|4508|4844|4913|4917)\d+$/,
            maestro: /^(5018|5020|5038|5612|5893|6304|6759|6761|6762|6763|0604|6390)\d+$/,
            dankort: /^(5019)\d+$/,
            interpayment: /^(636)\d+$/,
            unionpay: /^(62|88)\d+$/,
            'Visa': /^4[0-9]{12}(?:[0-9]{3})?$/,
            'MasterCard': /^5[1-5][0-9]{14}$/,
            'American Express': /^3[47][0-9]{13}$/,
            diners: /^3(?:0[0-5]|[68][0-9])[0-9]{11}$/,
            discover: /^6(?:011|5[0-9]{2})[0-9]{12}$/,
            jcb: /^(?:2131|1800|35\d{3})\d{11}$/
        };
        for (var key in re) {
            if (re[key].test(number)) {
                return key;
            }
        }
        return false;
    }
}
PaymentCardDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PaymentCardDetailsComponent, deps: [{ token: i1.FormBuilder }, { token: i2.CommonPaymentService }], target: i0.ɵɵFactoryTarget.Component });
PaymentCardDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: PaymentCardDetailsComponent, selector: "lib-payment-card-details", inputs: { cardPaymentData: "cardPaymentData" }, outputs: { payEmitter: "payEmitter" }, ngImport: i0, template: "<div class=\"content-group\" *ngIf=\"storedCards.length != 0\">\n    <div class=\"content-group\" style=\"margin-bottom:-16px\" *ngIf=\"portalName != 'AcceptProposal'\">\n        <select (change)=\"dropdown($event.target)\">\n            <option>Use existing credit card</option>\n            <option>Set up new debit or credit card</option>\n        </select><i class=\"fa-solid fa-angle-down\"></i>\n        <div class=\"vh\"></div>\n    </div>\n</div>\n\n<div *ngIf=\"card\">\n    <div class=\"content-group group-card\" style=\"margin-top:32px;margin-bottom: 0;\">\n        <div class=\"lable\">Select card</div>\n        <select (selected)=\"cardSelected($event.target,'html')\"\n            [ngStyle]=\"{'padding-left': cardSelectedType == 'html' || cardSelectedType == 'ts'  ? '46px' : '' }\">\n            <option value=\"\" disabled selected hidden>Please select</option>\n            <option *ngFor=\"let card of storedCards.storedCardDetails\"\n                [selected]=\"storedCards.storedCardDetails.length == 1\" [value]=\"card.id\"><span\n                    class=\"cardDescription\">XXXX - XXXX - XXXX -\n                    {{card.description.substring(card.description.indexOf('with') + 4)| slice:0:5 }}</span></option>\n        </select><i class=\"fa-solid fa-angle-down\"></i>\n    </div>\n    <div *ngIf=\"cardSelectedType == 'html' || cardSelectedType == 'ts'\">\n        <img class=\"stored-icon-aligns\" src=\"assets/paymentType/{{cardLogo}}.svg\" (error)=\"errorHandler()\">\n    </div>\n</div>\n<div *ngIf=\"!card\">\n    <div *ngIf=\"portalName != 'AcceptProposal'\">\n        <form [formGroup]=\"creditForm\" card container=\".card-container\" [card-width]=\"410\" [messages]=\"messages\"\n            [placeholders]=\"placeholders\" [masks]=\"masks\" [formatting]=\"formatting\" [debug]=\"debug\">\n            <ng-container formGroupName=\"payment\">\n                <div class=\"row\">\n                    <div class=\"col-md-6 credit-card-hide\">\n                        <div class=\"card-container\">\n\n                        </div>\n                    </div>\n                    <div class=\"col-md-6\">\n                        <div class=\"content-group\">\n                            <div *ngIf=\"!companyNameSelected\" class=\"lable required\">Cardholder's name\n                            </div>\n                            <div *ngIf=\"companyNameSelected\" class=\"lable required\">Company name</div>\n                            <input class=\"field\" type=\"text\" card-name formControlName=\"cardName\" (keyup)=\"keypress()\">\n                            <div *ngIf=\"!companyNameSelected\" class=\"company-name-link\" (click)=\"companyNameClick()\">Or\n                                click here to use a company name</div>\n                            <div *ngIf=\"companyNameSelected\" class=\"company-name-link\" (click)=\"companyNameClick()\">Or\n                                click here to use your personal information</div>\n                        </div>\n                        <div class=\"content-group\">\n                            <div class=\"lable required\">Card number</div>\n                            <input class=\"field\" type=\"tel\" autocomplete=\"cc-number\" card-number\n                                formControlName=\"cardNumber\" maxlength=\"19\" placeholder=\"xxxx xxxx xxxx xxxx\"\n                                (keyup)=\"setCardType()\" [class.error_field]=\"!isCardNumberLength\">\n                            <img *ngIf=\"cardLogo\" class=\"icon-align\" src=\"{{cardImg}}\" (error)=\"defaultCard()\"\n                                alt=\"card name\">\n                        </div>\n                        <div class=\"row row-group\">\n                            <div class=\"col content-group\">\n                                <div class=\"lable required\">CVC</div>\n                                <input class=\"field\" type=\"password\" autocomplete=\"new-password\" pattern=\"[0-9]*\"\n                                    inputmode=\"numeric\" card-cvc placeholder=\"xxx\" formControlName=\"cardCvc\"\n                                    (keyup)=\"keypress()\">\n                            </div>\n                            <div class=\"col content-group\">\n                                <div class=\"lable required\">Exp date</div>\n                                <input class=\"field\" type=\"tel\" autocomplete=\"cc-exp\" card-expiry\n                                    formControlName=\"expiry\" placeholder=\"MM / YY\" (keyup)=\"keypress()\">\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"content-group\" style=\"margin-bottom: 0;\">\n                    <div class=\"lable required\">Email address</div>\n                    <input class=\"field\" formControlName=\"email\" type=\"email\" (keyup)=\"keypress()\">\n                    <div class=\"email-info\">This email will only be used to keep you updated about their payments</div>\n                </div>\n            </ng-container>\n        </form>\n    </div>\n    <div *ngIf=\"portalName == 'AcceptProposal'\">\n        <form [formGroup]=\"creditForm\" card container=\".card-container\" [card-width]=\"410\" [messages]=\"messages\"\n            [placeholders]=\"placeholders\" [masks]=\"masks\" [formatting]=\"formatting\" [debug]=\"debug\">\n            <div class=\"row\">\n                <div class=\"col-md-6 credit-card-hide\">\n                    <div class=\"card-container\">\n\n                    </div>\n                </div>\n                <div class=\"col-md-6\">\n                    <div class=\"content-group\">\n                        <div *ngIf=\"!companyNameSelected\" class=\"lable required\">Cardholder's name\n                        </div>\n                        <div *ngIf=\"companyNameSelected\" class=\"lable required\">Company name</div>\n                        <input class=\"field\" type=\"text\" card-name formControlName=\"cardName\" (keyup)=\"keypress()\">\n                        <div *ngIf=\"!companyNameSelected\" class=\"company-name-link\" (click)=\"companyNameClick()\">Or\n                            click here to use a company name</div>\n                        <div *ngIf=\"companyNameSelected\" class=\"company-name-link\" (click)=\"companyNameClick()\">Or click\n                            here to use your personal information</div>\n                    </div>\n                    <div class=\"content-group\">\n                        <div class=\"lable required\">Card number</div>\n                        <input class=\"field\" type=\"tel\" autocomplete=\"cc-number\" card-number\n                            formControlName=\"cardNumber\" maxlength=\"19\" placeholder=\"xxxx xxxx xxxx xxxx\"\n                            (keyup)=\"setCardType()\" [class.error_field]=\"!isCardNumberLength\">\n                        <img *ngIf=\"cardLogo\" class=\"icon-align\" src=\"{{cardImg}}\" (error)=\"defaultCard()\"\n                            alt=\"card name\">\n                    </div>\n                    <div class=\"row row-group\">\n                        <div class=\"col content-group\">\n                            <div class=\"lable required\">CVC</div>\n                            <input class=\"field\" type=\"password\" autocomplete=\"new-password\" pattern=\"[0-9]*\"\n                                inputmode=\"numeric\" card-cvc placeholder=\"xxx\" formControlName=\"cardCvc\"\n                                (keyup)=\"keypress()\">\n                        </div>\n                        <div class=\"col content-group\">\n                            <div class=\"lable required\">Exp date</div>\n                            <input class=\"field\" type=\"tel\" autocomplete=\"cc-exp\" card-expiry formControlName=\"expiry\"\n                                placeholder=\"MM / YY\" (keyup)=\"keypress()\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"content-group\" style=\"margin-bottom: 0;\">\n                <div class=\"lable required\">Email address</div>\n                <input class=\"field\" formControlName=\"email\" type=\"email\" (keyup)=\"keypress()\">\n                <div class=\"email-info\">This email will only be used to keep you updated about their payments</div>\n            </div>\n        </form>\n    </div>\n</div>", styles: [".content-group{margin:16px 0;font-size:14px}.content-group .vh{border-bottom:1px dashed var(--primaryBorderColor);margin:16px 0}.content-group select{cursor:pointer;appearance:none;background-color:#fff;border:1px solid var(--primaryBorderColor);border-radius:4px;padding:0 5px;color:var(--primaryTextColor)}.content-group select:focus-visible{outline:1px solid var(--inputHighlight)}.content-group .fa-angle-down{position:absolute;margin-left:-30px;margin-top:13px;color:var(--primaryTextColor)}.content-group .icon-align{width:20px;max-height:32px;margin-right:16px}.row-group{margin:-16px 0 0;grid-gap:24px;gap:24px}.row-group .col{padding:0}.col{padding:0}select{width:100%;height:40px}.icon-align{margin-top:4px;width:33px!important;height:-moz-fit-content!important;height:fit-content!important;position:absolute;margin-left:-49px;filter:invert(74%) sepia(2%) brightness(49%) contrast(80%)}.stored-icon-aligns{margin-top:4px;width:33px!important;height:-moz-fit-content!important;height:fit-content!important;position:absolute;margin-left:-49px;filter:invert(74%) sepia(2%) brightness(49%) contrast(80%);position:relative;left:56px;top:-38px}.lable{color:var(--primaryTextColor);padding-bottom:8px;font-family:\"Helvetica\";font-style:normal;font-weight:400;font-size:14px;line-height:24px}.field{width:100%;border:1px solid var(--primaryBorderColor);border-radius:4px;height:40px;padding:0 5px;color:var(--primaryTextColor);font-family:\"Helvetica\";font-style:normal;font-weight:400;font-size:14px;line-height:24px}.field:focus-visible{outline:1px solid var(--inputHighlight)}.error_field{border-color:var(--negativeButtonColours)}.error_field:focus-visible{outline:none}.company-name-link{padding-top:8px;color:var(--tertiaryButtonFontColour);cursor:pointer;font-family:\"Helvetica\";font-style:normal;font-weight:400;font-size:14px;line-height:20px;max-width:-moz-fit-content;max-width:fit-content}.email-info{color:var(--positiveFoundation);margin-top:8px;font-family:\"Helvetica\";font-style:normal;font-weight:400;font-size:14px;line-height:24px}.credit-card-hide{margin:auto}.card-container{margin-top:25px}::ng-deep .jp-card-name{font-size:16px!important}.invalid-input{margin-top:5px;color:#b94a48}@media (max-width: 857px){.card-container{transform:scale(.9)}}@media (max-width: 768px){.card-container{transform:scale(.89)}.content-group{margin:12px 0}}@media (max-width: 578px){.row-group{grid-gap:16px;gap:16px}}@media (max-width: 425px){.card-container{margin-bottom:12px;margin-top:0;margin-left:0;transform:scale(.8)!important}}@media (max-width: 380px){.card-container{margin-top:0;margin-left:0;margin-bottom:0;transform:scale(.8)!important}}@media (max-width: 320px){.card-container{margin-left:-20px;margin-top:0;margin-bottom:0;transform:scale(.65)!important}}\n"], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { type: i1.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { type: i3.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.NgxCard, selector: "[card]", inputs: ["formatting", "debug", "messages", "placeholders", "container", "card-width", "masks"] }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i5.NgxCardNameTemplate, selector: "[card-name]" }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i5.NgxCardNumberTemplate, selector: "[card-number]" }, { type: i1.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i1.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { type: i5.NgxCardCvcTemplate, selector: "[card-cvc]" }, { type: i5.NgxCardExpiryTemplate, selector: "[card-expiry]" }], pipes: { "slice": i3.SlicePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PaymentCardDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-payment-card-details',
                    templateUrl: './payment-card-details.component.html',
                    styleUrls: ['./payment-card-details.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.CommonPaymentService }]; }, propDecorators: { payEmitter: [{
                type: Output
            }], cardPaymentData: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
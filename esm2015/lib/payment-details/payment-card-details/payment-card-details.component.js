import { Component, Input, Output, EventEmitter } from '@angular/core';
import { Validators } from '@angular/forms';
import { CreditCardValidators } from 'angular-cc-library';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../../serivces/common-payment.service";
import * as i3 from "@angular/common";
import * as i4 from "ngx-card";
export class PaymentCardDetailsComponent {
    constructor(fb, commomPaymentService) {
        this.fb = fb;
        this.commomPaymentService = commomPaymentService;
        this.payEmitter = new EventEmitter();
        this.storedCards = [];
        this.cardType = '';
        this.card = false;
        this.cardwidth = 350;
        this.messages = { validDate: 'valid\ndate', monthYear: 'mm/yy' }; //Strings for translation
        this.placeholders = { number: '•••• •••• •••• ••••', name: 'Full Name', expiry: '••/••', cvc: '•••' }; // Placeholders for rendered fields
        this.formatting = true;
        this.debug = true; // If true, will log helpful messages for setting up Card
        this.companyNameSelected = false;
        this.isCardNumberLength = true;
        this.cardLogo = '';
        this.cardImg = "";
    }
    ngOnInit() {
        this.payEmitter.emit(true);
        this.commomPaymentService.getStorecard(this.cardPaymentData.invoiceDetails.invoiceAddressId).subscribe((res) => {
            this.storedCards = res.records;
            console.log('cardDetails', this.storedCards);
        });
    }
    dropdown(val) {
        this.cardType = false;
        this.payEmitter.emit(false);
        if (val.value == 'Set up new debit or credit card') {
            this.card = true;
            this.buildCreditForms();
        }
        else {
            if (this.storedCards.storedCardDetails.length == 1) {
                this.cardSelected(this.storedCards.storedCardDetails[0].id, 'ts');
            }
            this.card = false;
        }
        // this.translate.get("Use existing credit card").subscribe(translations => {
        //   if(val.value== translations){
        //     this.card=true
        //     if(this.storedCards.length == 1){
        //       this.cardSelected(this.storedCards[0].id,'ts')
        //     }
        //   }
        //   else{
        //     this.card=false
        //     this.buildCreditForms()
        //   }
        // })
    }
    buildCreditForms() {
        let date = new Date().toISOString().slice(0, 10);
        this.creditForm = this.fb.group({
            payment: this.fb.group({
                'amount': [],
                'cardCharge': [this.cardPaymentData.cardCharges['']],
                'cardName': [this.cardPaymentData.customerDetails.customerName, [Validators.required]],
                'cardNumber': ['', [Validators.required, CreditCardValidators.validateCCNumber]],
                'cardCvc': ['', [Validators.required, Validators.minLength(3), Validators.maxLength(4)]],
                'paymentDate': [date],
                'description': ["Invoice no : " + this.cardPaymentData.invoiceDetails.invoiceNumber],
                'isportal': [true],
                'reference': ['Invoice no : ' + this.cardPaymentData.invoiceDetails.invoiceNumber,],
                'email': [this.cardPaymentData.customerDetails.emailId, [Validators.required, Validators.email]],
                'expiry': ['', [Validators.required, CreditCardValidators.validateExpDate]],
                "paymentMethod": [this.cardPaymentData.cardCharges[this.commomPaymentService.cardCharges].paymentMethodId],
                "dontSendToAccounts": [''],
            })
        });
        this.placeholders = { name: this.cardPaymentData.customerDetails.customerName ? this.cardPaymentData.customerDetails.customerName : 'Full Name' };
    }
    companyNameClick() {
        this.companyNameSelected = !this.companyNameSelected;
        this.creditForm.patchValue({ 'payment': { 'cardName': '' } });
    }
    keypress() {
        this.payEmitter.emit(this.creditForm);
    }
    setCardType() {
        this.cardLogo = this.detectCardType(this.creditForm.value.payment.cardNumber.replace(/\s/g, ""));
        var cardStatus = this.creditForm.get('payment.cardNumber');
        if (this.isCardNumberLength && (cardStatus === null || cardStatus === void 0 ? void 0 : cardStatus.status) == "INVALID")
            this.isCardNumberLength = false;
        if (!this.isCardNumberLength && (cardStatus === null || cardStatus === void 0 ? void 0 : cardStatus.status) == "VALID")
            this.isCardNumberLength = true;
        this.payEmitter.emit(this.creditForm);
        this.cardImg = "assets/paymentType/" + this.cardLogo + ".svg";
    }
    defaultCard() {
        this.cardImg = "assets/paymentType/card.svg";
    }
    errorHandler() {
        this.cardLogo = 'card';
    }
    cardSelected(val, from) {
        if (from == 'html') {
            val = val.value;
        }
        this.cardSelectedType = from;
        this.cardType = val.toString();
        var intArr = this.cardType.split(",");
        intArr.forEach((element) => {
            const tagsData = this.storedCards.storedCardDetails.find((x) => x['id'] == element);
            this.cardLogo = tagsData.card_type;
        });
        let date = new Date().toISOString().slice(0, 10);
        this.creditForm = this.fb.group({
            'paymentDate': [date, [Validators.required]],
            'description': ["Invoice no : #" + this.cardPaymentData.invoiceDetails.invoiceNumber],
            'reference': ['Invoice no : #' + this.cardPaymentData.invoiceDetails.invoiceNumber,],
            'paymentMethod': [this.cardPaymentData.cardCharges[this.commomPaymentService.cardCharges].paymentMethodId, [Validators.required]],
            'storedCard': [val, [Validators.required]],
            'cardName': [this.cardPaymentData.customerDetails.customerName, [Validators.required]],
            'amount': [],
            'cardCharge': [this.cardPaymentData.cardCharges[this.commomPaymentService.cardCharges].charge,],
            'isPortal': [true],
        });
        setTimeout(() => {
            this.payEmitter.emit(this.creditForm);
        }, 100);
    }
    detectCardType(number) {
        var re = {
            electron: /^(4026|417500|4405|4508|4844|4913|4917)\d+$/,
            maestro: /^(5018|5020|5038|5612|5893|6304|6759|6761|6762|6763|0604|6390)\d+$/,
            dankort: /^(5019)\d+$/,
            interpayment: /^(636)\d+$/,
            unionpay: /^(62|88)\d+$/,
            'Visa': /^4[0-9]{12}(?:[0-9]{3})?$/,
            'MasterCard': /^5[1-5][0-9]{14}$/,
            'American Express': /^3[47][0-9]{13}$/,
            diners: /^3(?:0[0-5]|[68][0-9])[0-9]{11}$/,
            discover: /^6(?:011|5[0-9]{2})[0-9]{12}$/,
            jcb: /^(?:2131|1800|35\d{3})\d{11}$/
        };
        for (var key in re) {
            if (re[key].test(number)) {
                return key;
            }
        }
        return false;
    }
}
PaymentCardDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PaymentCardDetailsComponent, deps: [{ token: i1.FormBuilder }, { token: i2.CommonPaymentService }], target: i0.ɵɵFactoryTarget.Component });
PaymentCardDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: PaymentCardDetailsComponent, selector: "lib-payment-card-details", inputs: { cardPaymentData: "cardPaymentData" }, outputs: { payEmitter: "payEmitter" }, ngImport: i0, template: "<div class=\"content-group\" style=\"margin-bottom:-16px\">\n    <select (change)=\"dropdown($event.target)\">\n        <option>Use existing credit card</option>\n        <option>Set up new debit or credit card</option>\n    </select><i class=\"fa-solid fa-angle-down\"></i>\n    <div class=\"vh\"></div>\n</div>\n\n<div *ngIf=\"!card\">\n    <div class=\"content-group group-card\" style=\"margin-top:32px;margin-bottom: 0;\">\n        <div class=\"lable\">Select card</div>\n        <select (change)=\"cardSelected($event.target,'html')\" [ngStyle]=\"{'padding-left': cardSelectedType == 'html' || cardSelectedType == 'ts'  ? '46px' : '' }\">\n            <option value=\"\" disabled selected hidden>Please select</option>\n            <option *ngFor=\"let card of storedCards.storedCardDetails\" [selected]=\"storedCards.length == 1\" [value]=\"card.id\"><span class=\"cardDescription\">XXXX - XXXX - XXXX - {{card.description.substring(card.description.indexOf('with') + 4)| slice:0:5 }}</span></option>\n        </select><i class=\"fa-solid fa-angle-down\"></i>\n    </div>\n    <div *ngIf=\"cardSelectedType == 'html' || cardSelectedType == 'ts'\">\n        <img class=\"stored-icon-aligns\" src=\"assets/paymentType/{{cardLogo}}.svg\" (error)=\"errorHandler()\">\n    </div>\n</div>\n<div *ngIf=\"card\">\n    <form [formGroup]=\"creditForm\" card container=\".card-container\" [card-width]=\"410\" [messages]=\"messages\"\n        [placeholders]=\"placeholders\" [masks]=\"masks\" [formatting]=\"formatting\" [debug]=\"debug\">\n         <div formGroupName=\"payment\">\n            <div class=\"row\">\n                <div class=\"col-md-6 credit-card-hide\">\n                    <div class=\"card-container\">\n\n                    </div>\n                </div>\n                <div class=\"col-md-6\">\n                    <div class=\"content-group\">\n                        <div *ngIf=\"!companyNameSelected\" class=\"lable required\">Cardholder's name\n                        </div>\n                        <div *ngIf=\"companyNameSelected\" class=\"lable required\">Company name</div>\n                        <input class=\"field\" type=\"text\" card-name formControlName=\"cardName\" (keyup)=\"keypress()\">\n                        <div *ngIf=\"!companyNameSelected\" class=\"company-name-link\" (click)=\"companyNameClick()\">Or click here to use a company name</div>\n                        <div *ngIf=\"companyNameSelected\" class=\"company-name-link\" (click)=\"companyNameClick()\">Or click here to use your personal information</div>\n                    </div>\n                    <div class=\"content-group\">\n                        <div class=\"lable required\">Card number</div>\n                        <input class=\"field\" type=\"tel\" autocomplete=\"cc-number\" card-number\n                            formControlName=\"cardNumber\" maxlength=\"19\" placeholder=\"xxxx xxxx xxxx xxxx\"\n                            (keyup)=\"setCardType()\" [class.error_field]=\"!isCardNumberLength\">\n                        <img *ngIf=\"cardLogo\" class=\"icon-align\" src=\"{{cardImg}}\" (error)=\"defaultCard()\"\n                            alt=\"card name\">\n                    </div>\n                    <div class=\"row row-group\">\n                        <div class=\"col content-group\">\n                            <div class=\"lable required\">CVC</div>\n                            <input class=\"field\" type=\"password\" autocomplete=\"new-password\" pattern=\"[0-9]*\"\n                                inputmode=\"numeric\" card-cvc placeholder=\"xxx\" formControlName=\"cardCvc\"\n                                (keyup)=\"keypress()\">\n                        </div>\n                        <div class=\"col content-group\">\n                            <div class=\"lable required\">Exp date</div>\n                            <input class=\"field\" type=\"tel\" autocomplete=\"cc-exp\" card-expiry formControlName=\"expiry\"\n                                placeholder=\"MM / YY\" (keyup)=\"keypress()\">\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"content-group\" style=\"margin-bottom: 0;\">\n                <div class=\"lable required\">Email address</div>\n                <input class=\"field\" formControlName=\"email\" type=\"email\" (keyup)=\"keypress()\">\n                <div class=\"email-info\">This email will only be used to keep you updated about their payments</div>\n            </div>\n        </div>\n    </form>\n</div>\n", styles: [".content-group{margin:16px 0;font-size:14px}.content-group .vh{border-bottom:1px dashed var(--primaryBorderColor);margin:16px 0}.content-group select{cursor:pointer;appearance:none;background-color:#fff;border:1px solid var(--primaryBorderColor);border-radius:4px;padding:0 5px;color:var(--primaryTextColor)}.content-group select:focus-visible{outline:1px solid var(--inputHighlight)}.content-group .fa-angle-down{position:absolute;margin-left:-30px;margin-top:13px;color:var(--primaryTextColor)}.content-group .icon-align{width:20px;max-height:32px;margin-right:16px}.row-group{margin:-16px 0 0;grid-gap:24px;gap:24px}.row-group .col{padding:0}.col{padding:0}select{width:100%;height:40px}.icon-align{margin-top:4px;width:33px!important;height:-moz-fit-content!important;height:fit-content!important;position:absolute;margin-left:-49px;filter:invert(74%) sepia(2%) brightness(49%) contrast(80%)}.stored-icon-aligns{margin-top:4px;width:33px!important;height:-moz-fit-content!important;height:fit-content!important;position:absolute;margin-left:-49px;filter:invert(74%) sepia(2%) brightness(49%) contrast(80%);position:relative;left:56px;top:-38px}.lable{color:var(--primaryTextColor);padding-bottom:8px;font-family:\"Helvetica\";font-style:normal;font-weight:400;font-size:14px;line-height:24px}.field{width:100%;border:1px solid var(--primaryBorderColor);border-radius:4px;height:40px;padding:0 5px;color:var(--primaryTextColor);font-family:\"Helvetica\";font-style:normal;font-weight:400;font-size:14px;line-height:24px}.field:focus-visible{outline:1px solid var(--inputHighlight)}.error_field{border-color:var(--negativeButtonColours)}.error_field:focus-visible{outline:none}.company-name-link{padding-top:8px;color:var(--tertiaryButtonFontColour);cursor:pointer;font-family:\"Helvetica\";font-style:normal;font-weight:400;font-size:14px;line-height:20px;max-width:-moz-fit-content;max-width:fit-content}.email-info{color:var(--positiveFoundation);margin-top:8px;font-family:\"Helvetica\";font-style:normal;font-weight:400;font-size:14px;line-height:24px}.credit-card-hide{margin:auto}.card-container{margin-top:25px}::ng-deep .jp-card-name{font-size:16px!important}.invalid-input{margin-top:5px;color:#b94a48}@media (max-width: 857px){.card-container{transform:scale(.9)}}@media (max-width: 768px){.card-container{transform:scale(.89)}.content-group{margin:12px 0}}@media (max-width: 578px){.row-group{grid-gap:16px;gap:16px}}@media (max-width: 425px){.card-container{margin-bottom:12px;margin-top:0;margin-left:0;transform:scale(.8)!important}}@media (max-width: 380px){.card-container{margin-top:0;margin-left:0;margin-bottom:0;transform:scale(.8)!important}}@media (max-width: 320px){.card-container{margin-left:-20px;margin-top:0;margin-bottom:0;transform:scale(.65)!important}}\n"], directives: [{ type: i1.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { type: i1.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.NgxCard, selector: "[card]", inputs: ["formatting", "debug", "messages", "placeholders", "container", "card-width", "masks"] }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgxCardNameTemplate, selector: "[card-name]" }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i4.NgxCardNumberTemplate, selector: "[card-number]" }, { type: i1.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i1.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { type: i4.NgxCardCvcTemplate, selector: "[card-cvc]" }, { type: i4.NgxCardExpiryTemplate, selector: "[card-expiry]" }], pipes: { "slice": i3.SlicePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PaymentCardDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-payment-card-details',
                    templateUrl: './payment-card-details.component.html',
                    styleUrls: ['./payment-card-details.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.CommonPaymentService }]; }, propDecorators: { payEmitter: [{
                type: Output
            }], cardPaymentData: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC1jYXJkLWRldGFpbHMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcGFyZW50cGF5bWVudC9zcmMvbGliL3BheW1lbnQtZGV0YWlscy9wYXltZW50LWNhcmQtZGV0YWlscy9wYXltZW50LWNhcmQtZGV0YWlscy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9wYXJlbnRwYXltZW50L3NyYy9saWIvcGF5bWVudC1kZXRhaWxzL3BheW1lbnQtY2FyZC1kZXRhaWxzL3BheW1lbnQtY2FyZC1kZXRhaWxzLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUF1QyxVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7Ozs7O0FBUTFELE1BQU0sT0FBTywyQkFBMkI7SUFXdEMsWUFDVSxFQUFlLEVBQ2Ysb0JBQTBDO1FBRDFDLE9BQUUsR0FBRixFQUFFLENBQWE7UUFDZix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBWDFDLGVBQVUsR0FBcUIsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUdqRSxnQkFBVyxHQUFNLEVBQUUsQ0FBQztRQUNwQixhQUFRLEdBQU0sRUFBRSxDQUFDO1FBU2pCLFNBQUksR0FBUyxLQUFLLENBQUM7UUFFbkIsY0FBUyxHQUFXLEdBQUcsQ0FBQztRQUN4QixhQUFRLEdBQVEsRUFBQyxTQUFTLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFFLHlCQUF5QjtRQUMxRixpQkFBWSxHQUFRLEVBQUMsTUFBTSxFQUFFLHFCQUFxQixFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFDLENBQUEsQ0FBQyxtQ0FBbUM7UUFFdkksZUFBVSxHQUFZLElBQUksQ0FBQztRQUMzQixVQUFLLEdBQVksSUFBSSxDQUFDLENBQUMseURBQXlEO1FBR2hGLHdCQUFtQixHQUFTLEtBQUssQ0FBQztRQUNsQyx1QkFBa0IsR0FBVSxJQUFJLENBQUM7UUFDakMsYUFBUSxHQUFNLEVBQUUsQ0FBQztRQUNqQixZQUFPLEdBQVcsRUFBRSxDQUFDO0lBZGpCLENBQUM7SUFrQkwsUUFBUTtRQUNOLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFPLEVBQUMsRUFBRTtZQUNoSCxJQUFJLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUM7WUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQyxDQUFDO0lBRUwsQ0FBQztJQUVELFFBQVEsQ0FBQyxHQUFPO1FBQ2QsSUFBSSxDQUFDLFFBQVEsR0FBQyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUIsSUFBRyxHQUFHLENBQUMsS0FBSyxJQUFJLGlDQUFpQyxFQUFDO1lBQ2hELElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1lBQ2pCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFBO1NBQ3hCO2FBQUk7WUFDRCxJQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBQztnQkFDaEQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBQyxJQUFJLENBQUMsQ0FBQTthQUNqRTtZQUNILElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1NBQ25CO1FBQ0QsNkVBQTZFO1FBQzdFLGtDQUFrQztRQUNsQyxxQkFBcUI7UUFDckIsd0NBQXdDO1FBQ3hDLHVEQUF1RDtRQUN2RCxRQUFRO1FBQ1IsTUFBTTtRQUNOLFVBQVU7UUFDVixzQkFBc0I7UUFDdEIsOEJBQThCO1FBQzlCLE1BQU07UUFDTixLQUFLO0lBRVAsQ0FBQztJQUVELGdCQUFnQjtRQUNkLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDO1lBQzlCLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQztnQkFDdkIsUUFBUSxFQUFFLEVBQUU7Z0JBQ1osWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUU7Z0JBQ3JELFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBRTtnQkFDdkYsWUFBWSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxvQkFBb0IsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUNoRixTQUFTLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN4RixhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUM7Z0JBQ3JCLGFBQWEsRUFBRSxDQUFDLGVBQWUsR0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUM7Z0JBQ2xGLFVBQVUsRUFBRSxDQUFDLElBQUksQ0FBRTtnQkFDbkIsV0FBVyxFQUFFLENBQUMsZUFBZSxHQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRztnQkFDbEYsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFDLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQy9GLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsb0JBQW9CLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBRTNFLGVBQWUsRUFBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsQ0FBQyxlQUFlLENBQUM7Z0JBQ3pHLG9CQUFvQixFQUFDLENBQUMsRUFBRSxDQUFDO2FBQ3hCLENBQUM7U0FFSCxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQSxDQUFDLENBQUEsSUFBSSxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFBLENBQUMsQ0FBQSxXQUFXLEVBQUMsQ0FBQztJQUM5SSxDQUFDO0lBRUQsZ0JBQWdCO1FBQ2QsSUFBSSxDQUFDLG1CQUFtQixHQUFDLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDO1FBQ25ELElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUMsU0FBUyxFQUFDLEVBQUMsVUFBVSxFQUFDLEVBQUUsRUFBQyxFQUFDLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBQ0QsUUFBUTtRQUNOLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBQ0QsV0FBVztRQUNULElBQUksQ0FBQyxRQUFRLEdBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUM5RixJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO1FBQzFELElBQUcsSUFBSSxDQUFDLGtCQUFrQixJQUFJLENBQUEsVUFBVSxhQUFWLFVBQVUsdUJBQVYsVUFBVSxDQUFFLE1BQU0sS0FBSSxTQUFTO1lBQUMsSUFBSSxDQUFDLGtCQUFrQixHQUFDLEtBQUssQ0FBQztRQUM1RixJQUFHLENBQUMsSUFBSSxDQUFDLGtCQUFrQixJQUFJLENBQUEsVUFBVSxhQUFWLFVBQVUsdUJBQVYsVUFBVSxDQUFFLE1BQU0sS0FBSSxPQUFPO1lBQUMsSUFBSSxDQUFDLGtCQUFrQixHQUFDLElBQUksQ0FBQztRQUMxRixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxxQkFBcUIsR0FBQyxJQUFJLENBQUMsUUFBUSxHQUFDLE1BQU0sQ0FBQTtJQUMzRCxDQUFDO0lBQ0QsV0FBVztRQUNULElBQUksQ0FBQyxPQUFPLEdBQUcsNkJBQTZCLENBQUE7SUFDOUMsQ0FBQztJQUNELFlBQVk7UUFDVixJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztJQUMxQixDQUFDO0lBQ0EsWUFBWSxDQUFDLEdBQU8sRUFBQyxJQUFXO1FBQzlCLElBQUcsSUFBSSxJQUFFLE1BQU0sRUFBQztZQUNkLEdBQUcsR0FBQyxHQUFHLENBQUMsS0FBSyxDQUFBO1NBQ2Q7UUFDRCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRTdCLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFXLEVBQUUsRUFBRTtZQUM3QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDO1lBQ3hGLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDO1lBQzVCLGFBQWEsRUFBRyxDQUFDLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBRTtZQUM5QyxhQUFhLEVBQUcsQ0FBQyxnQkFBZ0IsR0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUM7WUFDcEYsV0FBVyxFQUFHLENBQUMsZ0JBQWdCLEdBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFHO1lBQ3BGLGVBQWUsRUFBRyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDbEksWUFBWSxFQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQzNDLFVBQVUsRUFBRyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN2RixRQUFRLEVBQUcsRUFBRTtZQUNiLFlBQVksRUFBRyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsQ0FBQyxNQUFNLEVBQUc7WUFDakcsVUFBVSxFQUFHLENBQUMsSUFBSSxDQUFDO1NBQ3BCLENBQUMsQ0FBQztRQUNILFVBQVUsQ0FBQyxHQUFHLEVBQUU7WUFDZCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDeEMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2QsQ0FBQztJQUVELGNBQWMsQ0FBQyxNQUFhO1FBQzFCLElBQUksRUFBRSxHQUFRO1lBQ1YsUUFBUSxFQUFFLDZDQUE2QztZQUN2RCxPQUFPLEVBQUUsb0VBQW9FO1lBQzdFLE9BQU8sRUFBRSxhQUFhO1lBQ3RCLFlBQVksRUFBRSxZQUFZO1lBQzFCLFFBQVEsRUFBRSxjQUFjO1lBQ3hCLE1BQU0sRUFBRSwyQkFBMkI7WUFDbkMsWUFBWSxFQUFFLG1CQUFtQjtZQUNqQyxrQkFBa0IsRUFBRSxrQkFBa0I7WUFDdEMsTUFBTSxFQUFFLGtDQUFrQztZQUMxQyxRQUFRLEVBQUUsK0JBQStCO1lBQ3pDLEdBQUcsRUFBRSwrQkFBK0I7U0FDdkMsQ0FBQTtRQUVELEtBQUksSUFBSSxHQUFHLElBQUksRUFBRSxFQUFFO1lBQ2YsSUFBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUN2QixPQUFPLEdBQUcsQ0FBQTthQUNYO1NBQ0o7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7O3lIQXBLWSwyQkFBMkI7NkdBQTNCLDJCQUEyQix1SkNWeEMsZy9JQXNFQTs0RkQ1RGEsMkJBQTJCO2tCQUx2QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSwwQkFBMEI7b0JBQ3BDLFdBQVcsRUFBRSx1Q0FBdUM7b0JBQ3BELFNBQVMsRUFBRSxDQUFDLHVDQUF1QyxDQUFDO2lCQUNyRDtxSUFHVyxVQUFVO3NCQUFuQixNQUFNO2dCQUtFLGVBQWU7c0JBQXZCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCAsSW5wdXQgLE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQnVpbGRlciwgRm9ybUNvbnRyb2wsIEZvcm1Hcm91cCwgVmFsaWRhdG9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IENyZWRpdENhcmRWYWxpZGF0b3JzIH0gZnJvbSAnYW5ndWxhci1jYy1saWJyYXJ5JztcbmltcG9ydCB7IENvbW1vblBheW1lbnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VyaXZjZXMvY29tbW9uLXBheW1lbnQuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2xpYi1wYXltZW50LWNhcmQtZGV0YWlscycsXG4gIHRlbXBsYXRlVXJsOiAnLi9wYXltZW50LWNhcmQtZGV0YWlscy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3BheW1lbnQtY2FyZC1kZXRhaWxzLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgUGF5bWVudENhcmREZXRhaWxzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBAT3V0cHV0KCkgcGF5RW1pdHRlcjpFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIHVzZXJEYXRhOiBhbnk7XG4gIHN0b3JlZENhcmRzOiBhbnk9W107XG4gIGNhcmRUeXBlOiBhbnk9Jyc7XG4gIEBJbnB1dCgpIGNhcmRQYXltZW50RGF0YTphbnk7XG4gIC8vIEBJbnB1dCgpIHN0b3JlZENhcmRzOmFueTtcbiAgY2FyZFNlbGVjdGVkVHlwZTogYW55O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZmI6IEZvcm1CdWlsZGVyLFxuICAgIHByaXZhdGUgY29tbW9tUGF5bWVudFNlcnZpY2U6IENvbW1vblBheW1lbnRTZXJ2aWNlXG4gICkgeyB9XG4gIGNhcmQ6Ym9vbGVhbj1mYWxzZTtcbiAgY29udGFpbmVyOiBhbnk7XG4gIGNhcmR3aWR0aDogTnVtYmVyID0gMzUwO1xuICBtZXNzYWdlczogYW55ID0ge3ZhbGlkRGF0ZTogJ3ZhbGlkXFxuZGF0ZScsIG1vbnRoWWVhcjogJ21tL3l5J307ICAvL1N0cmluZ3MgZm9yIHRyYW5zbGF0aW9uXG4gIHBsYWNlaG9sZGVyczogYW55ID0ge251bWJlcjogJ+KAouKAouKAouKAoiDigKLigKLigKLigKIg4oCi4oCi4oCi4oCiIOKAouKAouKAouKAoicsIG5hbWU6ICdGdWxsIE5hbWUnLCBleHBpcnk6ICfigKLigKIv4oCi4oCiJywgY3ZjOiAn4oCi4oCi4oCiJ30gLy8gUGxhY2Vob2xkZXJzIGZvciByZW5kZXJlZCBmaWVsZHNcbiAgbWFza3M6IGFueTtcbiAgZm9ybWF0dGluZzogYm9vbGVhbiA9IHRydWU7XG4gIGRlYnVnOiBib29sZWFuID0gdHJ1ZTsgLy8gSWYgdHJ1ZSwgd2lsbCBsb2cgaGVscGZ1bCBtZXNzYWdlcyBmb3Igc2V0dGluZyB1cCBDYXJkXG4gIGNyZWRpdEZvcm0hOiBGb3JtR3JvdXA7XG4gIHN1bW1hcnk6IGFueTtcbiAgY29tcGFueU5hbWVTZWxlY3RlZDpib29sZWFuPWZhbHNlO1xuICBpc0NhcmROdW1iZXJMZW5ndGg6IGJvb2xlYW49dHJ1ZTtcbiAgY2FyZExvZ286IGFueT0nJztcbiAgY2FyZEltZzogc3RyaW5nID0gXCJcIjtcbiAgc3RvcmVkQ2FyZERhdGE6YW55O1xuXG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5wYXlFbWl0dGVyLmVtaXQodHJ1ZSk7XG4gICAgdGhpcy5jb21tb21QYXltZW50U2VydmljZS5nZXRTdG9yZWNhcmQodGhpcy5jYXJkUGF5bWVudERhdGEuaW52b2ljZURldGFpbHMuaW52b2ljZUFkZHJlc3NJZCkuc3Vic2NyaWJlKChyZXM6YW55KT0+e1xuICAgICAgdGhpcy5zdG9yZWRDYXJkcyA9IHJlcy5yZWNvcmRzO1xuICAgICAgY29uc29sZS5sb2coJ2NhcmREZXRhaWxzJyx0aGlzLnN0b3JlZENhcmRzKTtcbiAgICB9KTtcbiAgICBcbiAgfVxuXG4gIGRyb3Bkb3duKHZhbDphbnkpe1xuICAgIHRoaXMuY2FyZFR5cGU9ZmFsc2U7XG4gICAgdGhpcy5wYXlFbWl0dGVyLmVtaXQoZmFsc2UpO1xuICAgIGlmKHZhbC52YWx1ZSA9PSAnU2V0IHVwIG5ldyBkZWJpdCBvciBjcmVkaXQgY2FyZCcpe1xuICAgICAgdGhpcy5jYXJkID0gdHJ1ZTtcbiAgICAgIHRoaXMuYnVpbGRDcmVkaXRGb3JtcygpXG4gICAgfWVsc2V7XG4gICAgICAgIGlmKHRoaXMuc3RvcmVkQ2FyZHMuc3RvcmVkQ2FyZERldGFpbHMubGVuZ3RoID09IDEpe1xuICAgICAgICAgIHRoaXMuY2FyZFNlbGVjdGVkKHRoaXMuc3RvcmVkQ2FyZHMuc3RvcmVkQ2FyZERldGFpbHNbMF0uaWQsJ3RzJylcbiAgICAgICAgfVxuICAgICAgdGhpcy5jYXJkID0gZmFsc2U7XG4gICAgfVxuICAgIC8vIHRoaXMudHJhbnNsYXRlLmdldChcIlVzZSBleGlzdGluZyBjcmVkaXQgY2FyZFwiKS5zdWJzY3JpYmUodHJhbnNsYXRpb25zID0+IHtcbiAgICAvLyAgIGlmKHZhbC52YWx1ZT09IHRyYW5zbGF0aW9ucyl7XG4gICAgLy8gICAgIHRoaXMuY2FyZD10cnVlXG4gICAgLy8gICAgIGlmKHRoaXMuc3RvcmVkQ2FyZHMubGVuZ3RoID09IDEpe1xuICAgIC8vICAgICAgIHRoaXMuY2FyZFNlbGVjdGVkKHRoaXMuc3RvcmVkQ2FyZHNbMF0uaWQsJ3RzJylcbiAgICAvLyAgICAgfVxuICAgIC8vICAgfVxuICAgIC8vICAgZWxzZXtcbiAgICAvLyAgICAgdGhpcy5jYXJkPWZhbHNlXG4gICAgLy8gICAgIHRoaXMuYnVpbGRDcmVkaXRGb3JtcygpXG4gICAgLy8gICB9XG4gICAgLy8gfSlcblxuICB9XG5cbiAgYnVpbGRDcmVkaXRGb3Jtcygpe1xuICAgIGxldCBkYXRlID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKTtcbiAgICB0aGlzLmNyZWRpdEZvcm0gPSB0aGlzLmZiLmdyb3VwKHtcbiAgICAgIHBheW1lbnQ6IHRoaXMuZmIuZ3JvdXAoe1xuICAgICAgJ2Ftb3VudCc6IFtdLFxuICAgICAgJ2NhcmRDaGFyZ2UnOiBbdGhpcy5jYXJkUGF5bWVudERhdGEuY2FyZENoYXJnZXNbJyddIF0sLy9pbmRleCBVSSBuZWVkZWRcbiAgICAgICdjYXJkTmFtZSc6IFt0aGlzLmNhcmRQYXltZW50RGF0YS5jdXN0b21lckRldGFpbHMuY3VzdG9tZXJOYW1lLCBbVmFsaWRhdG9ycy5yZXF1aXJlZF0gXSxcbiAgICAgICdjYXJkTnVtYmVyJzogWycnLCBbVmFsaWRhdG9ycy5yZXF1aXJlZCwgQ3JlZGl0Q2FyZFZhbGlkYXRvcnMudmFsaWRhdGVDQ051bWJlcl1dLFxuICAgICAgJ2NhcmRDdmMnOiBbJycsIFtWYWxpZGF0b3JzLnJlcXVpcmVkLCBWYWxpZGF0b3JzLm1pbkxlbmd0aCgzKSwgVmFsaWRhdG9ycy5tYXhMZW5ndGgoNCldXSxcbiAgICAgICdwYXltZW50RGF0ZSc6IFtkYXRlXSxcbiAgICAgICdkZXNjcmlwdGlvbic6IFtcIkludm9pY2Ugbm8gOiBcIit0aGlzLmNhcmRQYXltZW50RGF0YS5pbnZvaWNlRGV0YWlscy5pbnZvaWNlTnVtYmVyXSxcbiAgICAgICdpc3BvcnRhbCc6IFt0cnVlIF0sXG4gICAgICAncmVmZXJlbmNlJzogWydJbnZvaWNlIG5vIDogJyt0aGlzLmNhcmRQYXltZW50RGF0YS5pbnZvaWNlRGV0YWlscy5pbnZvaWNlTnVtYmVyLCBdLFxuICAgICAgJ2VtYWlsJzogW3RoaXMuY2FyZFBheW1lbnREYXRhLmN1c3RvbWVyRGV0YWlscy5lbWFpbElkLFtWYWxpZGF0b3JzLnJlcXVpcmVkLCBWYWxpZGF0b3JzLmVtYWlsXV0sXG4gICAgICAnZXhwaXJ5JzogWycnLCBbVmFsaWRhdG9ycy5yZXF1aXJlZCwgQ3JlZGl0Q2FyZFZhbGlkYXRvcnMudmFsaWRhdGVFeHBEYXRlXV0sXG5cbiAgICAgIFwicGF5bWVudE1ldGhvZFwiOlt0aGlzLmNhcmRQYXltZW50RGF0YS5jYXJkQ2hhcmdlc1t0aGlzLmNvbW1vbVBheW1lbnRTZXJ2aWNlLmNhcmRDaGFyZ2VzXS5wYXltZW50TWV0aG9kSWRdLFxuICAgICAgXCJkb250U2VuZFRvQWNjb3VudHNcIjpbJyddLFxuICAgICAgfSlcblxuICAgIH0pO1xuICAgIHRoaXMucGxhY2Vob2xkZXJzID0ge25hbWU6IHRoaXMuY2FyZFBheW1lbnREYXRhLmN1c3RvbWVyRGV0YWlscy5jdXN0b21lck5hbWU/dGhpcy5jYXJkUGF5bWVudERhdGEuY3VzdG9tZXJEZXRhaWxzLmN1c3RvbWVyTmFtZTonRnVsbCBOYW1lJ307XG4gIH1cblxuICBjb21wYW55TmFtZUNsaWNrKCl7XG4gICAgdGhpcy5jb21wYW55TmFtZVNlbGVjdGVkPSF0aGlzLmNvbXBhbnlOYW1lU2VsZWN0ZWQ7XG4gICAgdGhpcy5jcmVkaXRGb3JtLnBhdGNoVmFsdWUoeydwYXltZW50Jzp7J2NhcmROYW1lJzonJ319KTtcbiAgfVxuICBrZXlwcmVzcygpe1xuICAgIHRoaXMucGF5RW1pdHRlci5lbWl0KHRoaXMuY3JlZGl0Rm9ybSk7XG4gIH1cbiAgc2V0Q2FyZFR5cGUoKXtcbiAgICB0aGlzLmNhcmRMb2dvPXRoaXMuZGV0ZWN0Q2FyZFR5cGUodGhpcy5jcmVkaXRGb3JtLnZhbHVlLnBheW1lbnQuY2FyZE51bWJlci5yZXBsYWNlKC9cXHMvZywgXCJcIikpXG4gICAgdmFyIGNhcmRTdGF0dXMgPSB0aGlzLmNyZWRpdEZvcm0uZ2V0KCdwYXltZW50LmNhcmROdW1iZXInKVxuICAgIGlmKHRoaXMuaXNDYXJkTnVtYmVyTGVuZ3RoICYmIGNhcmRTdGF0dXM/LnN0YXR1cyA9PSBcIklOVkFMSURcIil0aGlzLmlzQ2FyZE51bWJlckxlbmd0aD1mYWxzZTtcbiAgICBpZighdGhpcy5pc0NhcmROdW1iZXJMZW5ndGggJiYgY2FyZFN0YXR1cz8uc3RhdHVzID09IFwiVkFMSURcIil0aGlzLmlzQ2FyZE51bWJlckxlbmd0aD10cnVlO1xuICAgIHRoaXMucGF5RW1pdHRlci5lbWl0KHRoaXMuY3JlZGl0Rm9ybSk7XG4gICAgdGhpcy5jYXJkSW1nID0gXCJhc3NldHMvcGF5bWVudFR5cGUvXCIrdGhpcy5jYXJkTG9nbytcIi5zdmdcIlxuICB9XG4gIGRlZmF1bHRDYXJkKCl7XG4gICAgdGhpcy5jYXJkSW1nID0gXCJhc3NldHMvcGF5bWVudFR5cGUvY2FyZC5zdmdcIlxuICB9XG4gIGVycm9ySGFuZGxlcigpIHtcbiAgICB0aGlzLmNhcmRMb2dvID0gJ2NhcmQnO1xuIH1cbiAgY2FyZFNlbGVjdGVkKHZhbDphbnksZnJvbTpzdHJpbmcpe1xuICAgIGlmKGZyb209PSdodG1sJyl7XG4gICAgICB2YWw9dmFsLnZhbHVlXG4gICAgfVxuICAgIHRoaXMuY2FyZFNlbGVjdGVkVHlwZSA9IGZyb207XG4gICAgdGhpcy5jYXJkVHlwZT12YWwudG9TdHJpbmcoKTtcblxuICAgIHZhciBpbnRBcnIgPSB0aGlzLmNhcmRUeXBlLnNwbGl0KFwiLFwiKTtcbiAgICBpbnRBcnIuZm9yRWFjaCgoZWxlbWVudDphbnkpID0+IHtcbiAgICAgIGNvbnN0IHRhZ3NEYXRhID0gdGhpcy5zdG9yZWRDYXJkcy5zdG9yZWRDYXJkRGV0YWlscy5maW5kKCh4OmFueSkgPT4geFsnaWQnXSA9PSBlbGVtZW50KTtcbiAgICAgIHRoaXMuY2FyZExvZ28gPSB0YWdzRGF0YS5jYXJkX3R5cGU7XG4gICAgfSk7XG5cbiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zbGljZSgwLCAxMCk7XG4gICAgdGhpcy5jcmVkaXRGb3JtID0gdGhpcy5mYi5ncm91cCh7XG4gICAgICAgICdwYXltZW50RGF0ZScgOiBbZGF0ZSwgW1ZhbGlkYXRvcnMucmVxdWlyZWRdIF0sXG4gICAgICAgICdkZXNjcmlwdGlvbicgOiBbXCJJbnZvaWNlIG5vIDogI1wiK3RoaXMuY2FyZFBheW1lbnREYXRhLmludm9pY2VEZXRhaWxzLmludm9pY2VOdW1iZXJdLFxuICAgICAgICAncmVmZXJlbmNlJyA6IFsnSW52b2ljZSBubyA6ICMnK3RoaXMuY2FyZFBheW1lbnREYXRhLmludm9pY2VEZXRhaWxzLmludm9pY2VOdW1iZXIsIF0sXG4gICAgICAgICdwYXltZW50TWV0aG9kJyA6IFt0aGlzLmNhcmRQYXltZW50RGF0YS5jYXJkQ2hhcmdlc1t0aGlzLmNvbW1vbVBheW1lbnRTZXJ2aWNlLmNhcmRDaGFyZ2VzXS5wYXltZW50TWV0aG9kSWQsIFtWYWxpZGF0b3JzLnJlcXVpcmVkXV0sXG4gICAgICAgICdzdG9yZWRDYXJkJyA6IFt2YWwsIFtWYWxpZGF0b3JzLnJlcXVpcmVkXV0sXG4gICAgICAgICdjYXJkTmFtZScgOiBbdGhpcy5jYXJkUGF5bWVudERhdGEuY3VzdG9tZXJEZXRhaWxzLmN1c3RvbWVyTmFtZSwgW1ZhbGlkYXRvcnMucmVxdWlyZWRdXSxcbiAgICAgICAgJ2Ftb3VudCcgOiBbXSxcbiAgICAgICAgJ2NhcmRDaGFyZ2UnIDogW3RoaXMuY2FyZFBheW1lbnREYXRhLmNhcmRDaGFyZ2VzW3RoaXMuY29tbW9tUGF5bWVudFNlcnZpY2UuY2FyZENoYXJnZXNdLmNoYXJnZSwgXSxcbiAgICAgICAgJ2lzUG9ydGFsJyA6IFt0cnVlXSxcbiAgICAgIH0pO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMucGF5RW1pdHRlci5lbWl0KHRoaXMuY3JlZGl0Rm9ybSk7XG4gICAgICB9LCAxMDApO1xufVxuXG5kZXRlY3RDYXJkVHlwZShudW1iZXI6bnVtYmVyKSB7XG4gIHZhciByZSA6YW55ID0ge1xuICAgICAgZWxlY3Ryb246IC9eKDQwMjZ8NDE3NTAwfDQ0MDV8NDUwOHw0ODQ0fDQ5MTN8NDkxNylcXGQrJC8sXG4gICAgICBtYWVzdHJvOiAvXig1MDE4fDUwMjB8NTAzOHw1NjEyfDU4OTN8NjMwNHw2NzU5fDY3NjF8Njc2Mnw2NzYzfDA2MDR8NjM5MClcXGQrJC8sXG4gICAgICBkYW5rb3J0OiAvXig1MDE5KVxcZCskLyxcbiAgICAgIGludGVycGF5bWVudDogL14oNjM2KVxcZCskLyxcbiAgICAgIHVuaW9ucGF5OiAvXig2Mnw4OClcXGQrJC8sXG4gICAgICAnVmlzYSc6IC9eNFswLTldezEyfSg/OlswLTldezN9KT8kLyxcbiAgICAgICdNYXN0ZXJDYXJkJzogL141WzEtNV1bMC05XXsxNH0kLyxcbiAgICAgICdBbWVyaWNhbiBFeHByZXNzJzogL14zWzQ3XVswLTldezEzfSQvLFxuICAgICAgZGluZXJzOiAvXjMoPzowWzAtNV18WzY4XVswLTldKVswLTldezExfSQvLFxuICAgICAgZGlzY292ZXI6IC9eNig/OjAxMXw1WzAtOV17Mn0pWzAtOV17MTJ9JC8sXG4gICAgICBqY2I6IC9eKD86MjEzMXwxODAwfDM1XFxkezN9KVxcZHsxMX0kL1xuICB9XG5cbiAgZm9yKHZhciBrZXkgaW4gcmUpIHtcbiAgICAgIGlmKHJlW2tleV0udGVzdChudW1iZXIpKSB7XG4gICAgICAgIHJldHVybiBrZXlcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cblxufVxuIiwiPGRpdiBjbGFzcz1cImNvbnRlbnQtZ3JvdXBcIiBzdHlsZT1cIm1hcmdpbi1ib3R0b206LTE2cHhcIj5cbiAgICA8c2VsZWN0IChjaGFuZ2UpPVwiZHJvcGRvd24oJGV2ZW50LnRhcmdldClcIj5cbiAgICAgICAgPG9wdGlvbj5Vc2UgZXhpc3RpbmcgY3JlZGl0IGNhcmQ8L29wdGlvbj5cbiAgICAgICAgPG9wdGlvbj5TZXQgdXAgbmV3IGRlYml0IG9yIGNyZWRpdCBjYXJkPC9vcHRpb24+XG4gICAgPC9zZWxlY3Q+PGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1hbmdsZS1kb3duXCI+PC9pPlxuICAgIDxkaXYgY2xhc3M9XCJ2aFwiPjwvZGl2PlxuPC9kaXY+XG5cbjxkaXYgKm5nSWY9XCIhY2FyZFwiPlxuICAgIDxkaXYgY2xhc3M9XCJjb250ZW50LWdyb3VwIGdyb3VwLWNhcmRcIiBzdHlsZT1cIm1hcmdpbi10b3A6MzJweDttYXJnaW4tYm90dG9tOiAwO1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibGFibGVcIj5TZWxlY3QgY2FyZDwvZGl2PlxuICAgICAgICA8c2VsZWN0IChjaGFuZ2UpPVwiY2FyZFNlbGVjdGVkKCRldmVudC50YXJnZXQsJ2h0bWwnKVwiIFtuZ1N0eWxlXT1cInsncGFkZGluZy1sZWZ0JzogY2FyZFNlbGVjdGVkVHlwZSA9PSAnaHRtbCcgfHwgY2FyZFNlbGVjdGVkVHlwZSA9PSAndHMnICA/ICc0NnB4JyA6ICcnIH1cIj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIiBkaXNhYmxlZCBzZWxlY3RlZCBoaWRkZW4+UGxlYXNlIHNlbGVjdDwvb3B0aW9uPlxuICAgICAgICAgICAgPG9wdGlvbiAqbmdGb3I9XCJsZXQgY2FyZCBvZiBzdG9yZWRDYXJkcy5zdG9yZWRDYXJkRGV0YWlsc1wiIFtzZWxlY3RlZF09XCJzdG9yZWRDYXJkcy5sZW5ndGggPT0gMVwiIFt2YWx1ZV09XCJjYXJkLmlkXCI+PHNwYW4gY2xhc3M9XCJjYXJkRGVzY3JpcHRpb25cIj5YWFhYIC0gWFhYWCAtIFhYWFggLSB7e2NhcmQuZGVzY3JpcHRpb24uc3Vic3RyaW5nKGNhcmQuZGVzY3JpcHRpb24uaW5kZXhPZignd2l0aCcpICsgNCl8IHNsaWNlOjA6NSB9fTwvc3Bhbj48L29wdGlvbj5cbiAgICAgICAgPC9zZWxlY3Q+PGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1hbmdsZS1kb3duXCI+PC9pPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgKm5nSWY9XCJjYXJkU2VsZWN0ZWRUeXBlID09ICdodG1sJyB8fCBjYXJkU2VsZWN0ZWRUeXBlID09ICd0cydcIj5cbiAgICAgICAgPGltZyBjbGFzcz1cInN0b3JlZC1pY29uLWFsaWduc1wiIHNyYz1cImFzc2V0cy9wYXltZW50VHlwZS97e2NhcmRMb2dvfX0uc3ZnXCIgKGVycm9yKT1cImVycm9ySGFuZGxlcigpXCI+XG4gICAgPC9kaXY+XG48L2Rpdj5cbjxkaXYgKm5nSWY9XCJjYXJkXCI+XG4gICAgPGZvcm0gW2Zvcm1Hcm91cF09XCJjcmVkaXRGb3JtXCIgY2FyZCBjb250YWluZXI9XCIuY2FyZC1jb250YWluZXJcIiBbY2FyZC13aWR0aF09XCI0MTBcIiBbbWVzc2FnZXNdPVwibWVzc2FnZXNcIlxuICAgICAgICBbcGxhY2Vob2xkZXJzXT1cInBsYWNlaG9sZGVyc1wiIFttYXNrc109XCJtYXNrc1wiIFtmb3JtYXR0aW5nXT1cImZvcm1hdHRpbmdcIiBbZGVidWddPVwiZGVidWdcIj5cbiAgICAgICAgIDxkaXYgZm9ybUdyb3VwTmFtZT1cInBheW1lbnRcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTYgY3JlZGl0LWNhcmQtaGlkZVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1jb250YWluZXJcIj5cblxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTZcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRlbnQtZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgKm5nSWY9XCIhY29tcGFueU5hbWVTZWxlY3RlZFwiIGNsYXNzPVwibGFibGUgcmVxdWlyZWRcIj5DYXJkaG9sZGVyJ3MgbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2ICpuZ0lmPVwiY29tcGFueU5hbWVTZWxlY3RlZFwiIGNsYXNzPVwibGFibGUgcmVxdWlyZWRcIj5Db21wYW55IG5hbWU8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImZpZWxkXCIgdHlwZT1cInRleHRcIiBjYXJkLW5hbWUgZm9ybUNvbnRyb2xOYW1lPVwiY2FyZE5hbWVcIiAoa2V5dXApPVwia2V5cHJlc3MoKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiAqbmdJZj1cIiFjb21wYW55TmFtZVNlbGVjdGVkXCIgY2xhc3M9XCJjb21wYW55LW5hbWUtbGlua1wiIChjbGljayk9XCJjb21wYW55TmFtZUNsaWNrKClcIj5PciBjbGljayBoZXJlIHRvIHVzZSBhIGNvbXBhbnkgbmFtZTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiAqbmdJZj1cImNvbXBhbnlOYW1lU2VsZWN0ZWRcIiBjbGFzcz1cImNvbXBhbnktbmFtZS1saW5rXCIgKGNsaWNrKT1cImNvbXBhbnlOYW1lQ2xpY2soKVwiPk9yIGNsaWNrIGhlcmUgdG8gdXNlIHlvdXIgcGVyc29uYWwgaW5mb3JtYXRpb248L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb250ZW50LWdyb3VwXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibGFibGUgcmVxdWlyZWRcIj5DYXJkIG51bWJlcjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPVwiZmllbGRcIiB0eXBlPVwidGVsXCIgYXV0b2NvbXBsZXRlPVwiY2MtbnVtYmVyXCIgY2FyZC1udW1iZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtQ29udHJvbE5hbWU9XCJjYXJkTnVtYmVyXCIgbWF4bGVuZ3RoPVwiMTlcIiBwbGFjZWhvbGRlcj1cInh4eHggeHh4eCB4eHh4IHh4eHhcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChrZXl1cCk9XCJzZXRDYXJkVHlwZSgpXCIgW2NsYXNzLmVycm9yX2ZpZWxkXT1cIiFpc0NhcmROdW1iZXJMZW5ndGhcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgKm5nSWY9XCJjYXJkTG9nb1wiIGNsYXNzPVwiaWNvbi1hbGlnblwiIHNyYz1cInt7Y2FyZEltZ319XCIgKGVycm9yKT1cImRlZmF1bHRDYXJkKClcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD1cImNhcmQgbmFtZVwiPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJvdyByb3ctZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wgY29udGVudC1ncm91cFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsYWJsZSByZXF1aXJlZFwiPkNWQzwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImZpZWxkXCIgdHlwZT1cInBhc3N3b3JkXCIgYXV0b2NvbXBsZXRlPVwibmV3LXBhc3N3b3JkXCIgcGF0dGVybj1cIlswLTldKlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0bW9kZT1cIm51bWVyaWNcIiBjYXJkLWN2YyBwbGFjZWhvbGRlcj1cInh4eFwiIGZvcm1Db250cm9sTmFtZT1cImNhcmRDdmNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoa2V5dXApPVwia2V5cHJlc3MoKVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29sIGNvbnRlbnQtZ3JvdXBcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibGFibGUgcmVxdWlyZWRcIj5FeHAgZGF0ZTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz1cImZpZWxkXCIgdHlwZT1cInRlbFwiIGF1dG9jb21wbGV0ZT1cImNjLWV4cFwiIGNhcmQtZXhwaXJ5IGZvcm1Db250cm9sTmFtZT1cImV4cGlyeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiTU0gLyBZWVwiIChrZXl1cCk9XCJrZXlwcmVzcygpXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb250ZW50LWdyb3VwXCIgc3R5bGU9XCJtYXJnaW4tYm90dG9tOiAwO1wiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsYWJsZSByZXF1aXJlZFwiPkVtYWlsIGFkZHJlc3M8L2Rpdj5cbiAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJmaWVsZFwiIGZvcm1Db250cm9sTmFtZT1cImVtYWlsXCIgdHlwZT1cImVtYWlsXCIgKGtleXVwKT1cImtleXByZXNzKClcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZW1haWwtaW5mb1wiPlRoaXMgZW1haWwgd2lsbCBvbmx5IGJlIHVzZWQgdG8ga2VlcCB5b3UgdXBkYXRlZCBhYm91dCB0aGVpciBwYXltZW50czwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZm9ybT5cbjwvZGl2PlxuIl19
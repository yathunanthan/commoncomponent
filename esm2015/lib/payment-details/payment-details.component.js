import { __awaiter } from "tslib";
import { Component, Output, EventEmitter, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../serivces/common-payment.service";
import * as i2 from "./payment-bank-details/payment-bank-details.component";
import * as i3 from "./payment-card-details/payment-card-details.component";
import * as i4 from "../payment-complete/payment-complete.component";
import * as i5 from "@angular/common";
export class PaymentDetailsComponent {
    constructor(commonService) {
        this.commonService = commonService;
        this.paymentMethodType = 'Bank transfer';
        this.devicePayment = false;
        this.testResult = "testResult";
        this.total = 0;
        this.paymentSelect = 'credit';
        this.paymentMethodAllowed = 3;
        this.paymentMethod = 1;
        this.paymentCompleted = true;
        this.canDoWalletPay = false;
        this.walletPayLogoName = '';
        this.walletPayDesc = '';
        this.tax = 0;
        this.amount = 0;
        this.emitter = new EventEmitter();
        this.payEmitter = new EventEmitter();
        this.payOptionEmitter = new EventEmitter();
    }
    valid(paymentEnable) {
        this.paymentEnable = paymentEnable;
        this.payEmitter.emit(paymentEnable);
    }
    ngOnInit() {
        var _a, _b, _c, _d, _e, _f;
        this.commonService.userUrl$.subscribe((res) => {
            this.portalName = res === null || res === void 0 ? void 0 : res.portal;
        });
        this.commonService.paymentDetails$.subscribe((response) => {
            this.genericPaymentDetails = response;
        });
        console.log('paymentSelectedOptions', this.paymentSelectedOptions);
        console.log('portalname', this.portalName);
        console.log('statemtn', this.genericPaymentDetails);
        if (((_a = this.commonService.apiUrl) === null || _a === void 0 ? void 0 : _a.portal) == 'InvoicePortal') {
            this.amountToBePaid = this.genericPaymentDetails.paymentDetails.amountToBePaid;
            this.pendingAmount = this.genericPaymentDetails.paymentDetails.pendingAmount;
            this.paymentCompleted = (this.amountToBePaid - this.genericPaymentDetails.paymentDetails.pendingAmount) < 1;
            this.paymentMethod = this.genericPaymentDetails.isGocardlessEnabled && this.genericPaymentDetails.customerDetails.postcode ? 1 : (this.genericPaymentDetails.cardIntegration && this.genericPaymentDetails.cardCharges != -1 && (this.genericPaymentDetails.isBasysEnabled || this.genericPaymentDetails.isPayFortEnabled || this.genericPaymentDetails.isStripeEnabled || this.genericPaymentDetails.isWorldPayEnbled) && (!this.settings.cardEnable || this.settings.cardEnable == 'Always' || this.genericPaymentDetails.invoiceDetails.total + this.genericPaymentDetails.invoiceDetails.taxes + this.genericPaymentDetails.invoiceDetails.total * (this.tip / 100) + (this.genericPaymentDetails.cardCharges[this.genericPaymentDetails.cardCharges].charge / 100) * (this.genericPaymentDetails.invoiceDetails.total + this.genericPaymentDetails.invoiceDetails.taxes + this.genericPaymentDetails.invoiceDetails.total * (this.tip / 100)) <= this.settings.creditDebitCard)) ? 2 : 0;
            this.clientTelephone = this.genericPaymentDetails.clientDetails.countrycode + this.genericPaymentDetails.clientDetails.telephone;
            // this.canWalletPay();
        }
        else if (((_b = this.commonService.apiUrl) === null || _b === void 0 ? void 0 : _b.portal) == 'StatementPortal') {
            this.paymentMethod = this.genericPaymentDetails.isGocardlessEnabled && this.genericPaymentDetails.customerDetails.postcode ? 1 : (this.genericPaymentDetails.cardIntegration && (this.genericPaymentDetails.isStripeEnabled || this.genericPaymentDetails.isWorldPayEnbled || this.genericPaymentDetails.isPayFort) && (this.settings.cardEnable == undefined || (this.settings.cardEnable != 'No' && (this.settings.cardEnable == 'Always' || this.total <= this.settings.creditDebitCard)))) ? 2 : 0;
            this.clientTelephone = this.genericPaymentDetails.client_telephone;
            // this.canWalletPay();
        }
        else if (((_c = this.commonService.apiUrl) === null || _c === void 0 ? void 0 : _c.portal) == 'ServiceReminderBooking') {
            this.settings = this.genericPaymentDetails.settings.reduce((obj, item) => Object.assign(obj, { [item.key]: item.value }), {});
            let jobDescriptionPricingItems = this.genericPaymentDetails.jobDescriptionPricingItems;
            for (let n = 0; n < jobDescriptionPricingItems.length; ++n) {
                this.amount = this.amount + parseInt(jobDescriptionPricingItems[n].unitprice);
                this.tax = this.tax + parseInt(jobDescriptionPricingItems[n].unitprice) * parseInt(jobDescriptionPricingItems[0].taxRate) / 100;
            }
            this.genericPaymentDetails['amount'] = this.amount;
            this.paymentMethod = this.genericPaymentDetails.paymentDetails.cardIntegration && (this.genericPaymentDetails.paymentDetails.isPayFortEnabled || this.genericPaymentDetails.paymentDetails.isStripeEnabled || this.genericPaymentDetails.paymentDetails.isWorldPayEnbled) && (!this.settings.cardEnable || this.settings.cardEnable == 'Always' || this.amount + (this.genericPaymentDetails.paymentDetails.cardCharges[this.commonService.cardCharges.length].charge / 100) * this.amount <= this.settings.creditDebitCard) ? 2 : 0;
            this.clientTelephone = this.genericPaymentDetails.client_telephone;
        }
        this.isGocardlessEnabled = this.genericPaymentDetails.isGocardlessEnabled;
        this.postCode = ((_e = (_d = this.genericPaymentDetails) === null || _d === void 0 ? void 0 : _d.customerDetails) === null || _e === void 0 ? void 0 : _e.postcode) ? (_f = this.genericPaymentDetails) === null || _f === void 0 ? void 0 : _f.customerDetails.postcode : this.genericPaymentDetails['postcode'];
        this.commonService.setUserResponse(this.genericPaymentDetails, '');
        if ("settings" in this.genericPaymentDetails) {
            this.settings = this.genericPaymentDetails.settings.reduce((obj, item) => Object.assign(obj, { [item.key]: item.value }), {});
            this.paymentMethodType = this.settings.countryRegion == 6 ? 'ACH' : 'Bank transfer';
        }
        else {
            this.paymentMethodType = this.genericPaymentDetails.countryRegion == 6 ? 'ACH' : 'Bank transfer';
        }
        setTimeout(() => {
            this.paymentSelected(this.paymentMethod);
        }, 100);
        this.emitter.emit(this.paymentMethodType);
    }
    canWalletPay() {
        this.canDoWalletPay = false;
        this.genericPaymentDetails.isWalletPayEnabled = true;
        if (this.genericPaymentDetails.isStripeEnabled && this.genericPaymentDetails.isWalletPayEnabled) {
            let amountToBePaid = this.commonService.roundAmount(parseFloat(this.genericPaymentDetails.paymentDetails.amountToBePaid));
            let stripeWalletPayCharges = 0;
            let chargePct = parseFloat(this.genericPaymentDetails.WalletPayPaymentCharges);
            if (chargePct > 0) {
                stripeWalletPayCharges = this.commonService.roundAmount((chargePct / 100) * amountToBePaid);
            }
            let totalToBePaid = this.commonService.roundAmount(amountToBePaid + stripeWalletPayCharges);
            if (this.settings.cardEnable == 'EnableWhenAmountAt' && totalToBePaid > this.settings.creditDebitCard) {
                return;
            }
            //https://stripe.com/docs/js/initializing
            const stripe = window.Stripe(atob(this.genericPaymentDetails.pk_token), { stripeAccount: this.genericPaymentDetails.stripeConnectedAccountId });
            const paymentRequest = stripe.paymentRequest({
                country: this.genericPaymentDetails.clientDetails.countryNameCode,
                currency: this.genericPaymentDetails.currencyCode.toLowerCase(),
                total: {
                    label: 'Demo total',
                    amount: 1,
                },
                requestPayerName: true,
                requestPayerEmail: true,
            });
            (() => __awaiter(this, void 0, void 0, function* () {
                // Check the availability of the Payment Request API first.
                const result = yield paymentRequest.canMakePayment();
                console.log('canMakePayment', result);
                if (result) {
                    this.canDoWalletPay = true;
                    if (result.applePay) {
                        this.walletPayDesc = 'Apple Pay';
                        this.walletPayLogoName = 'ApplePay';
                    }
                    else if (result.googlePay) {
                        this.walletPayDesc = 'Google Pay';
                        this.walletPayLogoName = 'GooglePay';
                    }
                    else if (result.link) {
                        this.walletPayDesc = 'Pay via Link';
                        this.walletPayLogoName = 'LinkPay';
                    }
                    else {
                        this.walletPayDesc = 'WalletPay';
                        this.walletPayLogoName = 'Wallet';
                    }
                    console.log("Can make Wallet payments.");
                }
                else {
                    console.log("Cannot make Wallet payments.");
                }
            }))();
        }
    }
    changePaymentOption(option, selected) {
        this.paymentOption = option;
        if (selected == true) {
            if (this.paymentOption == 'debit') {
                this.payOptionEmitter.emit(option);
            }
            else if (this.paymentOption == 'credit') {
                this.payOptionEmitter.emit(option);
            }
        }
    }
    paymentSelected(value) {
        var temp = this.paymentMethod != value;
        if (value > 0) {
            this.paymentMethod = value;
            this.emitter.emit(value);
            var check = document.getElementById(value);
            if (check) {
                check.checked = true;
            }
            if (temp) {
                this.payEmitter.emit(true);
            }
        }
    }
}
PaymentDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PaymentDetailsComponent, deps: [{ token: i1.CommonPaymentService }], target: i0.ɵɵFactoryTarget.Component });
PaymentDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: PaymentDetailsComponent, selector: "lib-payment-details", inputs: { genericPaymentDetails: "genericPaymentDetails", tip: "tip", total: "total", paymentSelectedOptions: "paymentSelectedOptions" }, outputs: { emitter: "emitter", payEmitter: "payEmitter", payOptionEmitter: "payOptionEmitter" }, ngImport: i0, template: "<div class=\"row pay-body\">\n    <div class=\"pay-title-box\">\n        <div class=\"pay-title\">Payment details</div>\n        <div class=\"pay-details\">\n            <span\n                *ngIf=\"portalName == 'InvoicePortal' && (amountToBePaid - (pendingAmount ? pendingAmount : 0)) >0\">Please\n                fill the information below about your payment method</span>\n            <span *ngIf=\"portalName == 'StatementPortal' || portalName == 'AcceptProposal' || portalName == 'ServiceReminderBooking'\">Please fill the information\n                below about your payment method</span>\n        </div>\n        <div class=\"pay-details\"\n            *ngIf=\"portalName == 'InvoicePortal' && (amountToBePaid - (pendingAmount ? pendingAmount : 0)) <= 0\">\n            Payment status and summary information</div>\n    </div>\n    <div class=\"pay-selection\"\n        *ngIf=\"(amountToBePaid - pendingAmount) >0 || portalName == 'StatementPortal' || portalName == 'AcceptProposal' || portalName == 'ServiceReminderBooking' \">\n\n        <div class=\"col pay-width\">Pay with</div>\n        <div class=\"row width-q\">\n            <div *ngIf=\"isGocardlessEnabled && postCode || portalName != 'ServiceReminderBooking'\" class=\"col pay-btn\" (click)=\"paymentSelected(1)\"\n                [ngClass]=\"{'pay-btn-active' : paymentMethod == '1'}\">\n                <div *ngIf=\"portalName == 'AcceptProposal'\"><input type=\"radio\" name=\"payWith\" id=\"1\"\n                        (click)=\"changePaymentOption('debit',true)\" [checked]=\"paymentSelect=='debit'\"></div>\n                <div *ngIf=\"portalName != 'AcceptProposal'\"><input type=\"radio\" name=\"payWith\" id=\"1\"></div>\n                <span class=\"pay-btn-text\">{{paymentMethodType }}</span>\n                <svg width=\"20\" height=\"16\" viewBox=\"0 0 20 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path\n                        d=\"M13 10V7H16V5L20 8.5L16 12V10H13ZM12 3.7V5H0V3.7L6 0L12 3.7ZM5 6H7V11H5V6ZM1 6H3V11H1V6ZM11 6V8.5L9 10.3V6H11ZM7.1 12L6.5 12.5L8.2 14H0V12H7.1ZM15 11V14H12V16L8 12.5L12 9V11H15Z\"\n                        fill=\"#505B65\" />\n                </svg>\n\n            </div>\n            <div class=\"col pay-btn\" (click)=\"paymentSelected(2)\" [ngClass]=\"{'pay-btn-active' : paymentMethod == '2'}\">\n                <div *ngIf=\"portalName == 'AcceptProposal'\"><input type=\"radio\" name=\"payWith\" id=\"1\"\n                        (click)=\"changePaymentOption('credit',true)\" [checked]=\"paymentSelect=='credit'\"></div>\n                <div *ngIf=\"portalName != 'AcceptProposal'\"><input type=\"radio\" name=\"payWith\" id=\"1\"></div>\n                <span class=\"pay-btn-text\">Debit or credit card</span>\n                <svg width=\"20\" height=\"14\" viewBox=\"0 0 20 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path\n                        d=\"M17 0H3C2.20435 0 1.44129 0.316071 0.87868 0.87868C0.316071 1.44129 0 2.20435 0 3V11C0 11.7956 0.316071 12.5587 0.87868 13.1213C1.44129 13.6839 2.20435 14 3 14H17C17.7956 14 18.5587 13.6839 19.1213 13.1213C19.6839 12.5587 20 11.7956 20 11V3C20 2.20435 19.6839 1.44129 19.1213 0.87868C18.5587 0.316071 17.7956 0 17 0ZM9 10H5C4.73478 10 4.48043 9.89464 4.29289 9.70711C4.10536 9.51957 4 9.26522 4 9C4 8.73478 4.10536 8.48043 4.29289 8.29289C4.48043 8.10536 4.73478 8 5 8H9C9.26522 8 9.51957 8.10536 9.70711 8.29289C9.89464 8.48043 10 8.73478 10 9C10 9.26522 9.89464 9.51957 9.70711 9.70711C9.51957 9.89464 9.26522 10 9 10ZM15 10H13C12.7348 10 12.4804 9.89464 12.2929 9.70711C12.1054 9.51957 12 9.26522 12 9C12 8.73478 12.1054 8.48043 12.2929 8.29289C12.4804 8.10536 12.7348 8 13 8H15C15.2652 8 15.5196 8.10536 15.7071 8.29289C15.8946 8.48043 16 8.73478 16 9C16 9.26522 15.8946 9.51957 15.7071 9.70711C15.5196 9.89464 15.2652 10 15 10ZM18 4H2V3C2 2.73478 2.10536 2.48043 2.29289 2.29289C2.48043 2.10536 2.73478 2 3 2H17C17.2652 2 17.5196 2.10536 17.7071 2.29289C17.8946 2.48043 18 2.73478 18 3V4Z\"\n                        fill=\"#505B65\" />\n                </svg>\n            </div>\n            <div *ngIf=\"canDoWalletPay\" class=\"col pay-btn\" [ngClass]=\"{'pay-btn-active' : paymentMethod == '3'}\" (click)=\"paymentSelected(3)\">\n                <input type=\"radio\" name=\"payWith\" id=\"3\"><span class=\"pay-btn-text\">{{ walletPayDesc }}</span><img class=\"icon-align\" src=\"assets/paymentType/{{walletPayLogoName}}.svg\" alt=\"\">\n            </div>\n\n        </div>\n        <lib-payment-bank-details *ngIf=\"paymentMethod == '1' && isGocardlessEnabled && postCode || portalName != 'ServiceReminderBooking'\"\n            [paymentTypeS]=\"paymentMethodType\" (payEmitter)=\"valid($event)\"\n            [paymentData]=\"genericPaymentDetails\"></lib-payment-bank-details>\n        <lib-payment-card-details\n            *ngIf=\"(portalName == 'StatementPortal' && paymentMethod == '2') || (portalName == 'AcceptProposal' && paymentMethod == '2') || (portalName == 'InvoicePortal' && paymentMethod == '2' && genericPaymentDetails.cardIntegration && (genericPaymentDetails.isBasysEnabled || genericPaymentDetails.isPayFortEnabled || genericPaymentDetails.isStripeEnabled || genericPaymentDetails.isWorldPayEnbled )  && genericPaymentDetails.cardCharges.length != 0 &&  ( !settings.cardEnable || settings.cardEnable =='Always'|| genericPaymentDetails.invoiceDetails.total + genericPaymentDetails.invoiceDetails.taxes + genericPaymentDetails.invoiceDetails.total*(tip/100) <= settings.creditDebitCard))\n            || (portalName == 'ServiceReminderBooking' && paymentMethod == '2' && genericPaymentDetails.paymentDetails.cardIntegration && (genericPaymentDetails.paymentDetails.isPayFortEnabled || genericPaymentDetails.paymentDetails.isStripeEnabled || genericPaymentDetails.paymentDetails.isWorldPayEnbled )  && genericPaymentDetails.paymentDetails.cardCharges.length != 0 &&  ( !settings.cardEnable || settings.cardEnable =='Always'|| amount <= settings.creditDebitCard))\"\n            [cardPaymentData]=\"genericPaymentDetails\" (payEmitter)=\"valid($event)\"></lib-payment-card-details>\n    </div>\n    <div class=\"(portalName == 'StatementPortal' || portalName == 'InvoicePortal') && paymentCompleted\"\n        *ngIf=\"(amountToBePaid - pendingAmount)  <= 0\">\n        <lib-payment-complete [valid]=\"paymentCompleted\"\n            [completePageDetails]=\"genericPaymentDetails\"></lib-payment-complete>\n    </div>\n</div>\n<div class=\"row pay-body error-body\" *ngIf=\"paymentMethod == 0\">\n    <span *ngIf=\"settings.cardEnable =='Always' || total <= settings.creditDebitCard\" style=\"display: none\">\n        <span\n            *ngIf=\"paymentMethod != '0' ? '':paymentSelected((genericPaymentDetails.isGocardlessEnabled && genericPaymentDetails.customerDetails.postcode)?1:(genericPaymentDetails.cardIntegration && settings.cardEnable !='No' && (settings.cardEnable =='Always'|| total <= settings.creditDebitCard))?2:0)\"></span>\n    </span>\n    <div class=\"error-title\">\n        <div class=\"logo\"><img class=\"fa-check\" src=\"assets/icon/warning.svg\" alt=\"link-invalid\"></div>\n        <div>'We`re unable to process a payment. Please contact {{clientTelephone}} for assistance'\n        </div>\n    </div>\n</div>", styles: [".pay-body{border:1px solid var(--primaryBorderColor);box-shadow:0 4px 8px #0000000a,0 0 2px #0000000f,0 0 1px #0000000a;border-radius:4px;margin:24px;overflow:hidden}.error-body{text-align:center;height:280px}.error-body .error-title{font-weight:700;font-size:14px;line-height:20px;color:#f2994a;padding-top:120px;padding-bottom:12px}.error-body .error-content{font-weight:400;font-size:12px;line-height:20px;color:var(--primaryTextColor)}.pay-title-box{background:var(--titleBarBackground);width:100%;padding:16px 24.5px}.pay-title{font-weight:700;font-size:16px;line-height:24px;color:var(--titleBarFontColor)}.pay-details{font-size:14px;line-height:20px;color:var(--titleBarSecondaryFontColour);padding-top:12px}.pay-selection{width:100%;padding:24px}.width-q{margin:0;grid-gap:24px;gap:24px}.pay-width{font-weight:700;font-size:16px;color:var(--primaryTextColor);padding-bottom:8px}.pay-btn{background:#FFFFFF;border:1px solid var(--primaryBorderColor);border-radius:4px;font-size:14px;color:var(--primaryTextColor);display:flex;align-items:center;cursor:pointer;margin-bottom:0;padding-right:18px}.pay-btn-active{border:1px solid var(--secondaryButtonColour)}.pay-btn-text{font-size:14px;color:var(--primaryTextColor);padding:8px 8px 8px 16px;width:95%}.icon-align{width:20px;height:19px}.paymentCompleted{padding:0}@media (max-width: 578px){.pay-body{margin:16px 0 0;border:none;box-shadow:none;border-radius:0}.pay-title-box{padding:22px 16px}.pay-selection{padding:16px}}@media (max-width: 784px){.pay-btn{min-width:100%;padding-right:16px;padding-left:12px}.width-q{grid-gap:12px;gap:12px}.pay-width{padding-bottom:12px}.pay-details{padding-top:8px}}\n"], components: [{ type: i2.PaymentBankDetailsComponent, selector: "lib-payment-bank-details", inputs: ["paymentData", "paymentTypeS"], outputs: ["payEmitter"] }, { type: i3.PaymentCardDetailsComponent, selector: "lib-payment-card-details", inputs: ["cardPaymentData"], outputs: ["payEmitter"] }, { type: i4.PaymentCompleteComponent, selector: "lib-payment-complete", inputs: ["valid", "cardDetails", "completePageDetails"], outputs: ["close"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: PaymentDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'lib-payment-details',
                    templateUrl: './payment-details.component.html',
                    styleUrls: ['./payment-details.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.CommonPaymentService }]; }, propDecorators: { genericPaymentDetails: [{
                type: Input
            }], tip: [{
                type: Input
            }], total: [{
                type: Input
            }], paymentSelectedOptions: [{
                type: Input
            }], emitter: [{
                type: Output
            }], payEmitter: [{
                type: Output
            }], payOptionEmitter: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,